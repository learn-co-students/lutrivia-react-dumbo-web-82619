{"ast":null,"code":"var _jsxFileName = \"/Users/bennylouie/Desktop/Flatiron/mod4/lutrivia-react-dumbo-web-82619/lutrivia/src/App.js\";\nimport React from 'react';\nimport Header from './Header';\nimport QuestionsContainer from './QuestionsContainer';\nimport ScoreForm from './ScoreForm';\nimport questions from './data';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.updateScore = (question, arg) => {\n      let num;\n      const selectedQ = questions.questions.find(q => q.text === question);\n      console.log(this.state.currentQ);\n      console.log(selectedQ);\n\n      if (this.state.currentQ !== selectedQ) {\n        this.setState({\n          currentQ: selectedQ\n        });\n        selectedQ.answer === arg ? num = 1 : num = 0;\n        this.setState({\n          score: this.state.score + num\n        });\n      }\n    };\n\n    this.state = {\n      currentQ: '',\n      score: 0\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(Header, {\n      currentScore: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(QuestionsContainer, Object.assign({}, questions, {\n      updateScore: this.updateScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(ScoreForm, {\n      currentScore: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bennylouie/Desktop/Flatiron/mod4/lutrivia-react-dumbo-web-82619/lutrivia/src/App.js"],"names":["React","Header","QuestionsContainer","ScoreForm","questions","App","Component","constructor","updateScore","question","arg","num","selectedQ","find","q","text","console","log","state","currentQ","setState","answer","score","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,QAAtB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,GAAE;AACX;;AADW,SAQbC,WARa,GAQC,CAACC,QAAD,EAAWC,GAAX,KAAmB;AAC/B,UAAIC,GAAJ;AACA,YAAMC,SAAS,GAAGR,SAAS,CAACA,SAAV,CAAoBS,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWN,QAAzC,CAAlB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,QAAvB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;;AACA,UAAI,KAAKM,KAAL,CAAWC,QAAX,KAAwBP,SAA5B,EAAsC;AACpC,aAAKQ,QAAL,CAAc;AACZD,UAAAA,QAAQ,EAAEP;AADE,SAAd;AAGAA,QAAAA,SAAS,CAACS,MAAV,KAAqBX,GAArB,GAA2BC,GAAG,GAAG,CAAjC,GAAqCA,GAAG,GAAG,CAA3C;AACA,aAAKS,QAAL,CAAc;AACZE,UAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWI,KAAX,GAAmBX;AADd,SAAd;AAGD;AACF,KAtBY;;AAEX,SAAKO,KAAL,GAAW;AACTC,MAAAA,QAAQ,EAAE,EADD;AAETG,MAAAA,KAAK,EAAE;AAFE,KAAX;AAID;;AAkBDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,oBAAC,MAAD;AAAQ,MAAA,YAAY,EAAE,KAAKL,KAAL,CAAWI,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,kBAAD,oBAAwBlB,SAAxB;AAAmC,MAAA,WAAW,EAAE,KAAKI,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAE,KAAKU,KAAL,CAAWI,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AASD;;AApC+B;;AAsClC,eAAejB,GAAf","sourcesContent":["import React from 'react';\nimport Header from './Header';\nimport QuestionsContainer from './QuestionsContainer'\nimport ScoreForm from './ScoreForm';\nimport questions from './data';\n\nclass App extends React.Component {\n\n  constructor(){\n    super()\n    this.state={\n      currentQ: '',\n      score: 0\n    }\n  }\n\n  updateScore = (question, arg) => {\n    let num\n    const selectedQ = questions.questions.find(q => q.text === question)\n    console.log(this.state.currentQ)\n    console.log(selectedQ)\n    if (this.state.currentQ !== selectedQ){\n      this.setState({\n        currentQ: selectedQ\n      })\n      selectedQ.answer === arg ? num = 1 : num = 0\n      this.setState({\n        score: this.state.score + num\n      })\n    }\n  }\n\n  render (){\n    return (\n      <div>\n        <p>Lutrivia</p>\n        <Header currentScore={this.state.score}/>\n        <QuestionsContainer {...questions} updateScore={this.updateScore}/>\n        <br/>\n        <ScoreForm currentScore={this.state.score}/>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}